root: Program
  root_elements: 
    [0]: HelperInclude
      file_name: LIT_STR | include.f12 (main.f12:1)
    [1]: DeclFun
      name: IDENTIFIER | add (main.f12:3)
      params: 
        [0]: FunParam
          type: TypeArrayPrimitive
            kind: PRIMITIVE_INT (main.f12:3)
          name: IDENTIFIER | x (main.f12:3)
        [1]: FunParam
          type: TypePrimitive
            kind: PRIMITIVE_INT (main.f12:3)
          name: IDENTIFIER | y (main.f12:3)
      return_type: TypePrimitive
        kind: PRIMITIVE_INT (main.f12:3)
      statements: StmntBlock
        statements: 
          [0]: StmntReturn
            value: ExprAdd
              left: ExprArrayAccess
                array: ExprVar
                  identifier: IDENTIFIER | x (main.f12:4)
                index_expr: ExprLitInt
                  value: LIT_INT | 0 (main.f12:4)
              right: ExprVar
                identifier: IDENTIFIER | y (main.f12:4)
    [2]: DeclUnit
      name: IDENTIFIER | Human (main.f12:7)
      fields: 
        [0]: DeclUnitField
          type: TypePrimitive
            kind: PRIMITIVE_STRING (main.f12:8)
          name: IDENTIFIER | name (main.f12:8)
        [1]: DeclUnitField
          type: TypePrimitive
            kind: PRIMITIVE_INT (main.f12:9)
          name: IDENTIFIER | age (main.f12:9)
        [2]: DeclUnitField
          type: TypeArrayPrimitive
            kind: PRIMITIVE_STRING (main.f12:10)
          name: IDENTIFIER | addresses (main.f12:10)
    [3]: DeclFun
      name: IDENTIFIER | inner (main.f12:13)
      params: []
      return_type: TypePrimitive
        kind: PRIMITIVE_VOID
      statements: StmntBlock
        statements: 
          [0]: StmntToStdout
            values: 
              [0]: ExprLitStr
                value: LIT_STR | Hello (main.f12:14)
    [4]: DeclFun
      name: IDENTIFIER | main (main.f12:17)
      params: []
      return_type: TypePrimitive
        kind: PRIMITIVE_INT (main.f12:17)
      statements: StmntBlock
        statements: 
          [0]: DeclVar
            type: TypePrimitive
              kind: PRIMITIVE_INT (main.f12:18)
            name: IDENTIFIER | age (main.f12:18)
            value: ExprLitInt
              value: LIT_INT | 22 (main.f12:18)
            is_constant: True
          [1]: DeclVar
            type: TypePrimitive
              kind: PRIMITIVE_INT (main.f12:20)
            name: IDENTIFIER | y (main.f12:20)
            value: ExprFnCall
              function_name: IDENTIFIER | add (main.f12:20)
              args: 
                [0]: ExprVar
                  identifier: IDENTIFIER | x (main.f12:20)
                [1]: ExprLitInt
                  value: LIT_INT | 5 (main.f12:20)
            is_constant: False
          [2]: DeclVar
            type: TypeUnit
              unit_name: IDENTIFIER | Human (main.f12:22)
            name: IDENTIFIER | human (main.f12:22)
            value: ExprCreateUnit
              unit_name: IDENTIFIER | Human (main.f12:22)
              fields: 
                [0]: CreateUnitArg
                  field: IDENTIFIER | name (main.f12:22)
                  value: ExprLitStr
                    value: LIT_STR | Faustas (main.f12:22)
                [1]: CreateUnitArg
                  field: IDENTIFIER | age (main.f12:22)
                  value: ExprLitInt
                    value: LIT_INT | 22 (main.f12:22)
            is_constant: False
          [3]: StmntExpr
            expr: ExprAssign
              object: ExprAccess
                object: ExprVar
                  identifier: IDENTIFIER | human (main.f12:23)
                field: IDENTIFIER | age (main.f12:23)
              value: ExprLitInt
                value: LIT_INT | 22 (main.f12:23)
          [4]: StmntToStdout
            values: 
              [0]: ExprLitStr
                value: LIT_STR | A human named  (main.f12:24)
              [1]: ExprAccess
                object: ExprVar
                  identifier: IDENTIFIER | human (main.f12:24)
                field: IDENTIFIER | name (main.f12:24)
          [5]: DeclVar
            type: TypeArrayPrimitive
              kind: PRIMITIVE_INT (main.f12:26)
            name: IDENTIFIER | array (main.f12:26)
            value: ExprLitArray
              value: 
                [0]: ExprLitInt
                  value: LIT_INT | 1 (main.f12:26)
                [1]: ExprLitInt
                  value: LIT_INT | 2 (main.f12:26)
                [2]: ExprLitInt
                  value: LIT_INT | 3 (main.f12:26)
                [3]: ExprLitInt
                  value: LIT_INT | 4 (main.f12:26)
            is_constant: True
          [6]: DeclVar
            type: TypeArrayPrimitive
              kind: PRIMITIVE_INT (main.f12:27)
            name: IDENTIFIER | array2 (main.f12:27)
            value: None
            is_constant: False
          [7]: StmntToStdout
            values: 
              [0]: ExprArrayAccess
                array: ExprVar
                  identifier: IDENTIFIER | array (main.f12:29)
                index_expr: ExprLitInt
                  value: LIT_INT | 2 (main.f12:29)
          [8]: StmntEach
            element: DeclTmpVar
              name: IDENTIFIER | o (main.f12:32)
            array: ExprVar
              identifier: IDENTIFIER | array (main.f12:32)
            stmnt_block: StmntBlock
              statements: 
                [0]: StmntToStdout
                  values: 
                    [0]: ExprVar
                      identifier: IDENTIFIER | x (main.f12:33)
          [9]: StmntIf
            condition: ExprGt
              left: ExprVar
                identifier: IDENTIFIER | y (main.f12:36)
              right: ExprLitInt
                value: LIT_INT | 5 (main.f12:36)
            stmnt_block: StmntBlock
              statements: []
            else_clause: StmntIf
              condition: ExprEq
                left: ExprVar
                  identifier: IDENTIFIER | y (main.f12:38)
                right: ExprLitInt
                  value: LIT_INT | 0 (main.f12:38)
              stmnt_block: StmntBlock
                statements: []
              else_clause: StmntBlock
                statements: []
          [10]: StmntIf
            condition: ExprVar
              identifier: IDENTIFIER | a (main.f12:44)
            stmnt_block: StmntBlock
              statements: 
                [0]: StmntEmpty
            else_clause: None
          [11]: StmntWhile
            condition: ExprNe
              left: ExprVar
                identifier: IDENTIFIER | y (main.f12:46)
              right: ExprLitInt
                value: LIT_INT | 0 (main.f12:46)
            stmnt_block: StmntBlock
              statements: 
                [0]: StmntIf
                  condition: ExprEq
                    left: ExprVar
                      identifier: IDENTIFIER | y (main.f12:49)
                    right: ExprLitInt
                      value: LIT_INT | 1000 (main.f12:49)
                  stmnt_block: StmntBlock
                    statements: 
                      [0]: StmntBreak
                  else_clause: None
                [1]: StmntIf
                  condition: ExprEq
                    left: ExprVar
                      identifier: IDENTIFIER | y (main.f12:53)
                    right: ExprLitInt
                      value: LIT_INT | 59 (main.f12:53)
                  stmnt_block: StmntBlock
                    statements: 
                      [0]: StmntContinue
                  else_clause: None
          [12]: DeclVar
            type: TypePrimitive
              kind: PRIMITIVE_STRING (main.f12:58)
            name: IDENTIFIER | name (main.f12:58)
            value: ExprFromStdin
            is_constant: False
          [13]: StmntToStdout
            values: 
              [0]: ExprLitStr
                value: LIT_STR | Hello,  (main.f12:59)
              [1]: ExprVar
                identifier: IDENTIFIER | name (main.f12:59)
          [14]: StmntReturn
            value: ExprLitInt
              value: LIT_INT | 0 (main.f12:61)

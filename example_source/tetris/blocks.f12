>include "example_source/tetris/config.f12";

const char o = BACKGROUND_CHAR; // void symbol
const char x = BLOCK_CHAR; // value symbol

char[][][] block_type_1 = new [
    new [
        new [ o, x, o ],
        new [ x, x, x ],
        new [ o, o, o ]
    ],
    new [
        new [ o, x, o ],
        new [ o, x, x ],
        new [ o, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, x ],
        new [ o, x, o ]
    ],
    new [
        new [ o, x, o ],
        new [ x, x, o ],
        new [ o, x, o ]
    ]
];

char[][][] block_type_2 = new [
    new [
        new [ o, x, o ],
        new [ o, x, o ],
        new [ o, x, x ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, x ],
        new [ x, o, o ]
    ],
    new [
        new [ x, x, o ],
        new [ o, x, o ],
        new [ o, x, o ]
    ],
    new [
        new [ o, o, x ],
        new [ x, x, x ],
        new [ o, o, o ]
    ]
];

char[][][] block_type_3 = new [
    new [
        new [ o, x, o ],
        new [ o, x, o ],
        new [ x, x, o ]
    ],
    new [
        new [ x, o, o ],
        new [ x, x, x ],
        new [ o, o, o ]
    ],
    new [
        new [ o, x, x ],
        new [ o, x, o ],
        new [ o, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, x ],
        new [ o, o, x ]
    ]
];

char[][][] block_type_4 = new [
    new [
        new [ o, x, o ],
        new [ o, x, o ],
        new [ o, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, x ],
        new [ o, o, o ]
    ],
    new [
        new [ o, x, o ],
        new [ o, x, o ],
        new [ o, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, x ],
        new [ o, o, o ]
    ]
];

char[][][] block_type_5 = new [
    new [
        new [ o, o, o ],
        new [ x, x, o ],
        new [ x, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, o ],
        new [ x, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, o ],
        new [ x, x, o ]
    ],
    new [
        new [ o, o, o ],
        new [ x, x, o ],
        new [ x, x, o ]
    ]
];

char[][][][] block_types = new [
    block_type_1,
    block_type_2,
    block_type_3,
    block_type_4,
    block_type_5
];

int block_type_counter = 0;
int total_block_types = 5;

int rotation;

fun get_next_block_type => char[][][] {
    rotation = STARTING_ROTATION;
    ret block_types[next_type_index()];
}

fun rotate_block(char[][][] block_type) => char[][] {
    rotation = (rotation + 1) % TOTAL_ROTATIONS;
    ret block_type[rotation];
}

fun next_type_index => int {
    block_type_counter = (block_type_counter + 1) % total_block_types;
    ret block_type_counter;
}
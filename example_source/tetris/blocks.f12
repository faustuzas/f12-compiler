>include "example_source/tetris/config.f12";

const char o = BACKGROUND_CHAR; // void symbol
const char x = BLOCK_CHAR; // value symbol

unit Block {
    char[][][] rotations;
}

Block block1 = new Block |
    rotations: new [
        new [
            new [ o, x, o ],
            new [ x, x, x ],
            new [ o, o, o ]
        ],
        new [
            new [ o, x, o ],
            new [ o, x, x ],
            new [ o, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, x ],
            new [ o, x, o ]
        ],
        new [
            new [ o, x, o ],
            new [ x, x, o ],
            new [ o, x, o ]
        ]
    ]
|;

Block block2 = new Block |
    rotations: new [
        new [
            new [ o, x, o ],
            new [ o, x, o ],
            new [ o, x, x ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, x ],
            new [ x, o, o ]
        ],
        new [
            new [ x, x, o ],
            new [ o, x, o ],
            new [ o, x, o ]
        ],
        new [
            new [ o, o, x ],
            new [ x, x, x ],
            new [ o, o, o ]
        ]
    ]
|;

Block block3 = new Block |
    rotations: new [
        new [
            new [ o, x, o ],
            new [ o, x, o ],
            new [ x, x, o ]
        ],
        new [
            new [ x, o, o ],
            new [ x, x, x ],
            new [ o, o, o ]
        ],
        new [
            new [ o, x, x ],
            new [ o, x, o ],
            new [ o, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, x ],
            new [ o, o, x ]
        ]
    ]
|;

Block block4 = new Block |
    rotations: new [
        new [
            new [ o, x, o ],
            new [ o, x, o ],
            new [ o, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, x ],
            new [ o, o, o ]
        ],
        new [
            new [ o, x, o ],
            new [ o, x, o ],
            new [ o, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, x ],
            new [ o, o, o ]
        ]
    ]
|;

Block block5 = new Block |
    rotations: new [
        new [
            new [ o, o, o ],
            new [ x, x, o ],
            new [ x, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, o ],
            new [ x, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, o ],
            new [ x, x, o ]
        ],
        new [
            new [ o, o, o ],
            new [ x, x, o ],
            new [ x, x, o ]
        ]
    ]
|;

Block[] blocks = new [
    block1,
    block2,
    block3,
    block4,
    block5
];

int block_type_counter = 0;
int total_block_types = 5;

fun get_next_block => Block {
    int next_index = next_type_index();
    ret blocks[next_index];
}

fun next_rotation(int current_rotation) => int {
    ret (current_rotation + 1) % TOTAL_ROTATIONS;
}

fun next_type_index => int {
    block_type_counter = (block_type_counter + 1) % total_block_types;
    ret block_type_counter;
}

fun get_block_value(Block block, int rotation) => char[][] {
    ret block.rotations[rotation];
}

fun clean_blocks {
    int block_i = 0;
    while block_i < total_block_types {
        Block block = blocks[block_i];
        int rotation_i = 0;

        while rotation_i < 4 {
            int row_i = 0;

            while row_i < BLOCK_MAX_ROWS {
                free block.rotations[rotation_i][row_i];
                row_i = row_i + 1;
            }

            free block.rotations[rotation_i];
            rotation_i = rotation_i + 1;
        }

        free block;
        block_i = block_i + 1;
    }

    free blocks;
}
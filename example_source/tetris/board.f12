>include "example_source/tetris/blocks.f12";

unit FallingBlock {
    Block block;
    int current_rotation;

    int corner_x;
    int corner_y;
}

char[] input_buff = new char[15];
char[][] board;

FallingBlock falling_block;

fun init_board {
    board = new char[][BOARD_HEIGHT];

    int row = 0;
    while row < BOARD_HEIGHT {
        board[row] = new char[BOARD_WIDTH];

        int column = 0;
        while column < BOARD_WIDTH {
            board[row][column] = determine_char(column, row);
            column = column + 1;
        }

        row = row + 1;
    }

    falling_block = new_falling_block();
}

fun print_board {
    int row = 0;
    while row < BOARD_HEIGHT {
        int column = 0;
        while column < BOARD_WIDTH {
            put_char_x_y(board[row][column], column, row + TOP_OFFSET);
            column = column + 1;
        }

        row = row + 1;
    }
}

fun process_frame => int {
    paint_falling_block(BACKGROUND_CHAR);

    int chars_read = get_input(input_buff);
    process_input(chars_read);

    if will_block_collide(get_current_falling_block_value(), 0, 1) {
        paint_falling_block(BLOCK_CHAR);
        
        if remove_full_rows() > 0 {
            if is_game_won() {
                ret RESULT_WON;
            }
        }

        if is_game_over() {
            ret RESULT_LOST;
        }

        reset_falling_block();
        paint_falling_block(BLOCK_CHAR);
    } else {
        falling_block.corner_y = falling_block.corner_y + 1;
    }

    paint_falling_block(BLOCK_CHAR);

    ret RESULT_PLAYING;
}

fun process_input(int chars_read) {
    int i = 0;
    while i < chars_read {
        char c = input_buff[i];
        char[][] current_val = get_current_falling_block_value();
        int x = falling_block.corner_x;
        int y = falling_block.corner_y;

        if c == MOVE_LEFT && !will_block_collide(current_val, -1, 0) {
            falling_block.corner_x = falling_block.corner_x - 1;
        }

        if c == MOVE_RIGHT && !will_block_collide(current_val, 1, 0) {
            falling_block.corner_x = falling_block.corner_x + 1;
        }

        if c == MOVE_DOWN && !will_block_collide(current_val, 0, +1) {
            falling_block.corner_y = falling_block.corner_y + 1;
        }

        if c == ROTATE {
            int nxt_rotation = next_rotation(falling_block.current_rotation);
            if !will_block_collide(get_block_value(falling_block.block, nxt_rotation), 0, 0) {
                falling_block.current_rotation = nxt_rotation;
            }
        }

        i = i + 1;
    }
}

fun is_game_won => bool {
    int column = LEFT_WALL + 1;
    int first_row = FLOOR - 1;
    while column < RIGHT_WALL {
        if board[first_row][column] != BACKGROUND_CHAR {
            ret false;
        }

        column = column + 1;
    }

    ret true;
}

fun is_game_over => bool {
    int column = LEFT_WALL + 1;
    while column < RIGHT_WALL {
        if board[CEILING][column] != BACKGROUND_CHAR {
            ret true;
        }

        column = column + 1;
    }

    ret false;
}

fun remove_full_rows => int{
    int rows_removed = 0;

    int row = 0;
    while row < FLOOR {
        int column = 0;

        bool is_full = true;
        while column < RIGHT_WALL {
            if board[row][column] == BACKGROUND_CHAR {
                is_full = false;
                break;
            }

            column = column + 1;
        }

        if is_full {
            remove_full_row(row);
            rows_removed = rows_removed + 1;
        }

        row = row + 1;
    }

    ret rows_removed;
}

fun remove_full_row(int row_to_remove) {
    int row = row_to_remove;
    while row > CEILING {
        int column = LEFT_WALL + 1;
        while column < RIGHT_WALL {
            board[row][column] = board[row - 1][column];
            column = column + 1;
        }

        row = row - 1;
    }

    int column = LEFT_WALL + 1;
    while column < RIGHT_WALL {
        board[CEILING][column] = BACKGROUND_CHAR;
        column = column + 1;
    }
}

fun will_block_collide(char[][] block, int dx, int dy) => bool {
    int row = 0;
    while row < BLOCK_MAX_ROWS {
        int column = 0;
        while column < BLOCK_MAX_COLUMNS {
            if block[row][column] == BLOCK_CHAR {
                if will_point_collide(falling_block.corner_x + column + dx, falling_block.corner_y + row + dy) {
                    ret true;
                }
            }

            column = column + 1;
        }

        row = row + 1;
    }

    ret false;
}

fun will_point_collide(int x, int y) => bool {
    if x <= LEFT_WALL || x >= RIGHT_WALL || y >= FLOOR {
        ret true;
    }

    ret board[y][x] != BACKGROUND_CHAR;
}

fun paint_falling_block(char c) {
    char[][] block_value = get_current_falling_block_value();

    int row = 0;
    while row < BLOCK_MAX_ROWS {
        int column = 0;
        while column < BLOCK_MAX_COLUMNS {
            if block_value[row][column] == BLOCK_CHAR {
                board[falling_block.corner_y + row][falling_block.corner_x + column] = c;
            }

            column = column + 1;
        }

        row = row + 1;
    }
}

fun new_falling_block => FallingBlock {
    ret new FallingBlock |
        corner_x: BOARD_WIDTH / 2,
        corner_y: 0,
        current_rotation: STARTING_ROTATION,
        block: get_next_block()
    |;
}

fun reset_falling_block {
    free falling_block;
    falling_block = new_falling_block();
}

fun get_current_falling_block_value => char[][] {
    ret get_block_value(falling_block.block, falling_block.current_rotation);
}

fun determine_char(int column, int row) => char {
    if is_wall(column, row) {
        ret WALL_CHAR;
    }

    if is_floor(column, row) {
        ret FLOOR_CHAR;
    }

    ret BACKGROUND_CHAR;
}

fun is_wall(int x, int y) => bool {
    if y == BOARD_HEIGHT {
        ret false;
    }

    ret x == LEFT_WALL || x == RIGHT_WALL;
}

fun is_floor(int x, int y) => bool {
    ret y == FLOOR;
}

fun clean_board {
    clean_blocks();

    int row = 0;
    while row < BOARD_HEIGHT {
        free board[row];
        row = row + 1;
    }

    free falling_block;
}